buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
        classpath group: 'net.md-5', name: 'SpecialSource', version: '1.8.6', changing: true
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: 'shadow-dependency.gradle'

archivesBaseName = 'minecraft-rest'
group = 'dev.shaundsmith.minecraft'
version = '1.0.0'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run-client')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    implementation 'io.undertow:undertow-core:2.1.3.Final'
    implementation 'io.undertow:undertow-servlet:2.1.3.Final'
    implementation 'io.undertow:undertow-websockets-jsr:2.1.3.Final'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    testImplementation "org.mockito:mockito-core:3.5.10"
    testImplementation "org.mockito:mockito-junit-jupiter:3.5.10"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "javax.json:javax.json-api:1.1.4"
    testImplementation "org.apache.johnzon:johnzon-core:1.2.8"
    testImplementation "org.skyscreamer:jsonassert:1.5.0"

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Generate shaded jar
shadowJar {
    dependencies {
        exclude(dependency { dependency -> isMinecraftDependency(dependency)})
    }

    exclude "module-info.class"
    exclude "META-INF/versions/**"

    relocate 'io.undertow', 'dev.shaundsmith.minecraft.rest.dependencies.io.undertow'
    relocate 'com.fasterxml', 'dev.shaundsmith.minecraft.rest.dependencies.com.fasterxml'
    relocate 'org.jboss', 'dev.shaundsmith.minecraft.rest.dependencies.org.jboss'
    relocate 'org.wildfly', 'dev.shaundsmith.minecraft.rest.dependencies.org.wildfly'

    classifier ''
}

reobf {
    shadowJar {

    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}